// eslint-disable-next-line no-unused-vars
const should = require('should')
const CurlParser = require('../src/CurlParser.js')

describe('CurlParser', () => {
    describe('parse', () => {
        it('should return an object with a url property', () => {
            const result = CurlParser.parse('curl https://www.google.com')
            result.should.have.property('url')
            result.url.should.equal('https://www.google.com')
        })
        it('should remove the end slash from the url if it has no sub path', () => {
            const result = CurlParser.parse('curl https://www.google.com/')
            result.should.have.property('url')
            result.url.should.equal('https://www.google.com')
        })
        it('should keep the end slash of the url if it has a sub path', () => {
            const result = CurlParser.parse('curl https://www.google.com/page1/')
            result.should.have.property('url')
            result.url.should.equal('https://www.google.com/page1/')
        })
        it('should return an object with a method property', () => {
            const result = CurlParser.parse('curl https://www.google.com')
            result.should.have.property('method')
            result.method.should.equal('get')
        })
        it('should return an object with a headers property', () => {
            const result = CurlParser.parse('curl https://www.google.com --header "hello: world"')
            result.should.have.property('headers')
            result.headers.should.be.an.Object()
            result.headers.should.have.property('hello', 'world')
        })
        it('should return an object with a cookies property', () => {
            const result = CurlParser.parse('curl https://www.google.com --cookie "hello=world"')
            result.should.have.property('cookies')
            result.cookies.should.be.an.Object()
            result.cookies.should.have.property('hello', 'world')
        })
        describe('using -d', () => {
            it('should return set the method to post when -d is used', () => {
                const result = CurlParser.parse('curl https://www.google.com -d "hello world"')
                result.method.should.equal('post')
            })
            it('should return an object with a data property with the correct value', () => {
                const result = CurlParser.parse('curl https://www.google.com -d "hello world"')
                result.data.should.equal('hello world')
            })
            it('should return an object with a data property with the correct value when the body is JSON', () => {
                const result = CurlParser.parse('curl https://www.google.com -d \'{"hello":"world"}\'')
                result.data.should.equal('{"hello":"world"}')
            })
            it('should return an object with a data property with the correct value when the body is JSON and the body is a single quote', () => {
                const result = CurlParser.parse('curl https://www.google.com -d \'{"hello":"world"}\'')
                result.data.should.equal('{"hello":"world"}')
            })
            it('should return an object with a data property with the correct value when the body is JSON and the body is a double quote', () => {
                const result = CurlParser.parse('curl https://www.google.com -d \'{"hello":"world"}\'')
                result.data.should.equal('{"hello":"world"}')
            })
            it('should return an object with a data property with the correct value when form data is used', () => {
                const result = CurlParser.parse('curl https://www.google.com -d "hello=world"')
                result.data.should.equal('hello=world')
            })
            it('should return an object with a data property with the correct value when multiple form data is used', () => {
                const result = CurlParser.parse('curl https://www.google.com -d "hello=world" -d "foo=bar"')
                result.data.should.equal('hello=world&foo=bar')
                result.dataArray.should.be.an.Array()
                result.dataArray.should.have.length(2)
                result.dataArray[0].should.equal('hello=world')
                result.dataArray[1].should.equal('foo=bar')
            })
            it('should return a URL with query parameters when the method is GET and form data is used', () => {
                const result = CurlParser.parse('curl -XGET https://www.google.com -d "hello=world"')
                result.method.should.equal('get')
                result.url.should.equal('https://www.google.com/?hello=world')
            })
        })
        describe('using -X', () => {
            it('should return method=post when -X is used', () => {
                const result = CurlParser.parse('curl https://www.google.com -X POST')
                result.method.should.equal('post')
            })
            it('should return method=put when -X is used', () => {
                const result = CurlParser.parse('curl https://www.google.com -X PUT')
                result.method.should.equal('put')
            })
            it('should return method=delete when -X is used', () => {
                const result = CurlParser.parse('curl https://www.google.com -X DELETE')
                result.method.should.equal('delete')
            })
            it('should return method=patch when -X is used', () => {
                const result = CurlParser.parse('curl https://www.google.com -X PATCH')
                result.method.should.equal('patch')
            })
            it('should return method=head when -X is used', () => {
                const result = CurlParser.parse('curl https://www.google.com -X HEAD')
                result.method.should.equal('head')
            })
            it('should return method=head when --request HEAD is used', () => {
                const result = CurlParser.parse('curl https://www.google.com --request HEAD')
                result.method.should.equal('head')
            })
            it('should return method=head when --head is used', () => {
                const result = CurlParser.parse('curl --head https://www.google.com')
                result.method.should.equal('head')
            })
            it('should return method=options when -X OPTIONS is used', () => {
                const result = CurlParser.parse('curl https://www.google.com -X OPTIONS')
                result.method.should.equal('options')
            })
            it('should return method=put when -XPUT is used after the url', () => {
                const result = CurlParser.parse('curl https://www.google.com -XPUT')
                result.method.should.equal('put')
            })
            it('should return set the method to put when -XPUT is used before URL', () => {
                const result = CurlParser.parse('curl -XGET https://www.google.com')
                result.method.should.equal('get')
            })
        })
        describe('with authentication', () => {
            it('should return an object with a auth object (type: basic inferred)', () => {
                const result = CurlParser.parse('curl https://www.google.com --user "hello:world"')
                result.should.have.property('auth').and.be.an.Object()
                result.auth.should.have.property('user', 'hello')
                result.auth.should.have.property('password', 'world')
                result.auth.should.have.property('type', 'basic')
            })
            it('should return an object with a auth object (type: basic) when --basic is used', () => {
                const result = CurlParser.parse('curl https://www.google.com --basic --user "hello:world"')
                result.should.have.property('auth').and.be.an.Object()
                result.auth.should.have.property('user', 'hello')
                result.auth.should.have.property('password', 'world')
                result.auth.should.have.property('type', 'basic')
            })
            it('should return an object with a auth object (type: digest)', () => {
                const result = CurlParser.parse('curl https://www.google.com --digest --user "hello:world"')
                result.should.have.property('auth').and.be.an.Object()
                result.auth.should.have.property('user', 'hello')
                result.auth.should.have.property('password', 'world')
                result.auth.should.have.property('type', 'digest')
            })
            it('should return an object with a auth object username and password are encoded in the URL', () => {
                const result = CurlParser.parse('curl https://hello:world@localhost:8080')
                result.should.have.property('auth').and.be.an.Object()
                result.auth.should.have.property('user', 'hello')
                result.auth.should.have.property('password', 'world')
                result.auth.should.have.property('type', 'basic')
            })
        })
        describe('with headers', () => {
            it('should return an object with a headers object', () => {
                const result = CurlParser.parse('curl https://www.google.com -H "Content-Type: application/json"')
                result.should.have.property('headers').and.be.an.Object()
                result.headers.should.have.property('Content-Type', 'application/json')
            })
            it('should return an object with a headers object with multiple headers', () => {
                const result = CurlParser.parse('curl https://www.google.com -H "Content-Type: application/json" -H "Accept: application/json"')
                result.should.have.property('headers').and.be.an.Object()
                result.headers.should.have.property('Content-Type', 'application/json')
                result.headers.should.have.property('Accept', 'application/json')
            })
        })
        describe('with cookies', () => {
            it('should return an object with a cookies object', () => {
                const result = CurlParser.parse('curl https://www.google.com -b "hello=world"')
                result.should.have.property('cookies').and.be.an.Object()
                result.cookies.should.have.property('hello', 'world')
            })
            it('should return an object with a cookies object with multiple cookies', () => {
                const result = CurlParser.parse('curl https://www.google.com -b "hello=world;foo=bar"')
                result.should.have.property('cookies').and.be.an.Object()
                result.cookies.should.have.property('hello', 'world')
                result.cookies.should.have.property('foo', 'bar')
            })
        })
        describe('with data', () => {
            it('should return an object with a data property and a dataArray array', () => {
                const result = CurlParser.parse('curl https://www.google.com -d "hello=world"')
                result.should.have.property('data', 'hello=world')
                result.should.have.property('dataArray').and.be.an.Array()
                result.dataArray.should.have.length(1)
            })
            it('should return an object with a data property and a dataArray array with multiple data', () => {
                const result = CurlParser.parse('curl https://www.google.com -d "hello=world&foo=bar"')
                result.should.have.property('data', 'hello=world&foo=bar')
                result.should.have.property('dataArray').and.be.an.Array()
                result.dataArray.should.have.length(2)
                result.dataArray[0].should.equal('hello=world')
                result.dataArray[1].should.equal('foo=bar')
            })
            it('should return an object with a data property and a dataArray array with multiple data when -d is used multiple times', () => {
                const result = CurlParser.parse('curl https://www.google.com -d "hello=world" -d "foo=bar"')
                result.should.have.property('data', 'hello=world&foo=bar')
                result.should.have.property('dataArray').and.be.an.Array()
                result.dataArray.should.have.length(2)
                result.dataArray[0].should.equal('hello=world')
                result.dataArray[1].should.equal('foo=bar')
            })
            it('should return an object with a data property and a dataArray array with multiple data array when -d is used multiple times', () => {
                const result = CurlParser.parse('curl https://www.google.com -d "foo=one" -d "foo=two"')
                result.should.have.property('data', 'foo=one&foo=two')
                result.should.have.property('dataArray').and.be.an.Array()
                result.dataArray.should.have.length(2)
                result.dataArray[0].should.equal('foo=one')
                result.dataArray[1].should.equal('foo=two')
            })
            it('should return an object with a data property and a dataArray array with multiple data array when -d is used multiple times with the same key', () => {
                const result = CurlParser.parse('curl https://www.google.com "foo=two" -d "foo=bar"  -d "foo=baz"')
                result.should.have.property('data', 'foo=bar&foo=baz')
                result.should.have.property('dataArray').and.be.an.Array()
                result.dataArray.should.have.length(2)
                result.dataArray[0].should.equal('foo=bar')
                result.dataArray[1].should.equal('foo=baz')
            })
        })
        describe('with form data', () => {
            it('should return an object with a multipartData object', () => {
                const result = CurlParser.parse('curl https://www.google.com -F "hello=world"')
                result.should.have.property('multipartData').and.be.an.Array()
                result.multipartData.should.have.length(1)
                result.multipartData[0].should.have.property('key', 'hello')
                result.multipartData[0].should.have.property('value', 'world')
            })
            it('should return an object with a multipartData object with multiple data', () => {
                const result = CurlParser.parse('curl https://www.google.com -F "hello=world" -F "foo=bar"')
                result.should.have.property('multipartData').and.be.an.Array()
                result.multipartData.should.have.length(2)
                result.multipartData[0].should.have.a.property('key', 'hello')
                result.multipartData[0].should.have.a.property('value', 'world')
                result.multipartData[1].should.have.a.property('key', 'foo')
                result.multipartData[1].should.have.a.property('value', 'bar')
            })
            it('should return an object with a multipartData object with multiple data array when -F is used multiple times', () => {
                const result = CurlParser.parse('curl https://www.google.com -F "foo=one" -F "foo=two"')
                result.should.have.property('multipartData').and.be.an.Object()
                result.multipartData.should.be.an.Array()
                result.multipartData.should.have.length(2)
                result.multipartData[0].should.have.a.property('key', 'foo')
                result.multipartData[0].should.have.a.property('value', 'one')
                result.multipartData[1].should.have.a.property('key', 'foo')
                result.multipartData[1].should.have.a.property('value', 'two')
            })
            it('should return an object with a multipartData object with file and form data', () => {
                const result = CurlParser.parse('curl https://www.google.com -F "foo=one" -F "foo=two" -F "file=@/path/to/file"')
                result.should.have.property('multipartData').and.be.an.Array()
                result.multipartData.should.have.length(3)
                result.multipartData[0].should.have.a.property('key', 'foo')
                result.multipartData[0].should.have.a.property('value', 'one')
                result.multipartData[1].should.have.a.property('key', 'foo')
                result.multipartData[1].should.have.a.property('value', 'two')
                result.multipartData[2].should.have.a.property('key', 'file')
                result.multipartData[2].should.have.a.property('value', '@/path/to/file')
            })
            it('should return an object with a multipartData object with file and form data with filename', () => {
                const result = CurlParser.parse('curl https://www.google.com -F "foo=one" -F "foo=two" -F "file=@/path/to/file;filename=foo"')
                result.should.have.property('multipartData').and.be.an.Array()
                result.multipartData.should.have.length(3)
                result.multipartData[0].should.have.a.property('key', 'foo')
                result.multipartData[0].should.have.a.property('value', 'one')
                result.multipartData[1].should.have.a.property('key', 'foo')
                result.multipartData[1].should.have.a.property('value', 'two')
                result.multipartData[2].should.have.a.property('key', 'file')
                result.multipartData[2].should.have.a.property('value', '@/path/to/file')
                result.multipartData[2].should.have.a.property('filename', 'foo')
            })
            it('should return an object with a multipartData object with file and form data with content type', () => {
                const result = CurlParser.parse('curl https://www.google.com -F "foo=one" -F "foo=two" -F "file=@/path/to/file;type=text/plain"')
                result.should.have.property('multipartData').and.be.an.Array()
                result.multipartData.should.have.length(3)
                result.multipartData[0].should.have.a.property('key', 'foo')
                result.multipartData[0].should.have.a.property('value', 'one')
                result.multipartData[1].should.have.a.property('key', 'foo')
                result.multipartData[1].should.have.a.property('value', 'two')
                result.multipartData[2].should.have.a.property('key', 'file')
                result.multipartData[2].should.have.a.property('value', '@/path/to/file')
                result.multipartData[2].should.have.a.property('type', 'text/plain')
            })
            it('should return an object with a multipartData object with file and form data with content type and filename', () => {
                const result = CurlParser.parse('curl https://www.google.com -F "foo=one" -F "foo=two" -F "file=@/path/to/file;type=text/plain;filename=foo"')
                result.should.have.property('multipartData').and.be.an.Array()
                result.multipartData.should.have.length(3)
                result.multipartData[0].should.have.a.property('key', 'foo')
                result.multipartData[0].should.have.a.property('value', 'one')
                result.multipartData[1].should.have.a.property('key', 'foo')
                result.multipartData[1].should.have.a.property('value', 'two')
                result.multipartData[2].should.have.a.property('key', 'file')
                result.multipartData[2].should.have.a.property('value', '@/path/to/file')
                result.multipartData[2].should.have.a.property('type', 'text/plain')
                result.multipartData[2].should.have.a.property('filename', 'foo')
            })
            it('should return an object with a multipartData object with file and form data with content type and filename and name', () => {
                const result = CurlParser.parse('curl https://www.google.com -F "foo=one" -F "foo=two" -F "file=@/path/to/file;type=text/plain;filename=foo;name=bar;custom=123"')
                result.should.have.property('multipartData').and.be.an.Array()
                result.multipartData.should.have.length(3)
                result.multipartData[0].should.have.a.property('key', 'foo')
                result.multipartData[0].should.have.a.property('value', 'one')
                result.multipartData[1].should.have.a.property('key', 'foo')
                result.multipartData[1].should.have.a.property('value', 'two')
                result.multipartData[2].should.have.a.property('key', 'file')
                result.multipartData[2].should.have.a.property('value', '@/path/to/file')
                result.multipartData[2].should.have.a.property('type', 'text/plain')
                result.multipartData[2].should.have.a.property('filename', 'foo')
                result.multipartData[2].should.have.a.property('name', 'bar')
                result.multipartData[2].should.have.a.property('custom', '123')
            })
        })
    })
})